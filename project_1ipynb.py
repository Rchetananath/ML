# -*- coding: utf-8 -*-
"""PROJECT_1ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1g45J6J7VyZBKSpvwGFvLhMl88D4ACkEy
"""

pip install nltk

import nltk

nltk.download('wordnet')

#loading dataset

import pandas as pd

dt = pd.read_csv("spam.csv",encoding='Windows-1252')

import chardet 
with open("spam.csv",'rb')as rawdata:
  result = chardet.detect(rawdata.read(100000))
result

dt.head(10)

dt['spam'] = dt['type'].map({'spam':1,'ham':0}).astype(int)

dt.head()

print("colums in the given data:")
for col in dt.columns:
  print(col)

t=len(dt['type'])
print("no of rows in review column:",t)
t=len(dt['text'])
print("no of rows in linked column: ",t)

#tokenization

dt['text'][4]

def tokenizer(text):
  return text.split()

dt['text']=dt['text'].apply(tokenizer)

dt['text'][4]

#stemming#before
dt['text'][4]

from nltk.stem.snowball import SnowballStemmer
porter = SnowballStemmer("english",ignore_stopwords= False )

def stem_it(text):
  return [porter.stem(word) for word in text]

dt['text']=dt['text'].apply(stem_it)

dt['text'][4]

#lemmitization

from nltk.stem import WordNetLemmatizer
lemmatizer = WordNetLemmatizer()

def lemmit_it(text):
  return [lemmatizer.lemmatize(word,pos='a')for word in text]

dt['text'][4]

from nltk.corpus import stopwords
stop_words=stopwords.words("english")

nltk.download('stopwords')

def stop_it(text):
  review = [word for word in text if not word in stop_words]
  return review

dt['text']=dt['text'].apply(stop_it)

dt['text'][4]

dt.head()

dt['text']=dt['text'].apply(' '.join)

dt.head()

from sklearn.feature_extraction.text import TfidfVectorizer
tfidf=TfidfVectorizer()
y=dt.spam.values
x=tfidf.fit_transform(dt['text'])

from sklearn.model_selection import train_test_split
x_train,x_text,y_train,y_text=train_test_split(x,y,random_state=1,test_size=0.2,shuffle=False)

from sklearn.linear_model import LogisticRegression
clf= LogisticRegression()
clf.fit(x_train,y_train)
y_pred=clf.predict(x_text)

from sklearn.metrics import accuracy_score
acc_log = accuracy_score(y_pred,y_text)*100
print("accuracy:",acc_log)

